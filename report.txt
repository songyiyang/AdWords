I finished the draft of this project after 2 weeks hastily hard working, but I still faced a lot of problems, then I turned my face into the discussion Plaza, I solved the problems with the help of others' questions and answers. This is a great challenge that ever met and a big lesson learned.
  It is required to use SQL to finish all the core logic parts, so at first, I use PL-SQL to develop the core parts of the project and then I connect java with Oracle and write all SQL sentences in JAVA.
  Although my project may contain many drawbacks, anyway, I've learned many things based on the project and I feel it is a great help for improving my skills.
    First of all, I started to develop the core functions for the project. The core function for this project is to calculate the similarity for the strings. I developed 4 assistant functions for this function named "removesamestr", "numsofchar", "string_length" and "substrbysep". The function "removesamestr" is for two strings, when input to strings and output a single string union the two original strings where no duplicate words from original. The function "numsofchar" created to calculate the number of different words between string1 and string2. The function "string_length" created to calculate number of words in a single string and the function "substrbysep" created to select substring from the original by delimiter(in this project the delimiter chosen is empty space). Then with the four assistant functions, I can calculate the cosine similarity from two strings. There is another function called "string_agg" which I created for aggregate string in SQL using "group by" statement.
  With these functions I can do the tasks. I first inserted the table "Advertisers", "Keywords" and "Queries". Then I created two temp tables called "temp" and "temp2". After that I created table "balance" and "ctc". Table "balance" is used to records the current balance for all advertiser and when balance not enough the advertiser should not shown in the task. Table "ctc" is created for keep track on the times of impressions. When x-value(current times of impressions) meets the requirement(x > ctc*100 or x-100 >ctc*100 or x-200>ctc*100...) the balance for that advertiser should not change. Table "temp" and "temp2" were all for select the tasks. Finally I can select different tasks for different requirements.
  I found the first-price auction simpler than the second one. For the different algorithm, what I'll do for the first-price auction is just select what I need and order them by the rank. But for second one, I'll have to differ the bid and insert the next highest bid into the current temp table, it cost me a lot of time to figure it out. For the three different algorithms, I found it easy to deal with because it's just used for ranking the outputs, so with the tables above, I can easily select the different ranking with simple calculations.
  In this project I have faced many problems, the first problem that I met is when preparing the SQL statement, I often didn't know when to add semicolon at the end of the SQL statement. Then, after using PreparedStatement and Statement to construct the SQL, I encountered an exception saying "invalid character". After trying several times, I found that for the pure SQL statement like "SELECT" or "CREATE" I must NOT add semicolon at the end of SQL statement. However for the complicated statement that starts with "BEGIN" and ends with "END", there MUST be a semicolon at the end of the SQL statement. 
  Next problem is that I'm not quite familiar with the SQL language; using SQL language to create the function is very difficult for me. I decided to learn deeply in this language. So I search a lot of books and information from website and with some tough learning time I have known much more about it. For java parts, I have learned java in several years ago but I know nothing about JDBC until the project come out. So I have to follow what the professor told in class and write down the JDBC parts in java.
  The third problem I've faced is that the output is incorrect. I found that for query id 77 my output is very weird from the correct, mine has an advertiser which id is 941. I've checked a lot of details and finally I found that my "removesamestr" function had a bug. So I correct this function and get the right result. 
  This is a big project for me, I was not in touch with the real database ever before. And this made me learn a lot of skills in the database field.  
  Thank you!
Name: Yiyang Song, UFID: 71793344

